{"version":3,"file":"static/js/834.fd5f7d17.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/Contact.js","components/ContactList/ContactList.js","pages/ContactsBook/ContactsBook.js"],"sourcesContent":["export const selectFilter = state => state.filter.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state).toLowerCase().trim();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().trim().includes(filter)\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contact list`);\n    }\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <form onSubmit={handleSubmit}>\n          <Stack spacing={3}>\n            <TextField\n              onChange={onChange}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              size=\"small\"\n            />\n            <TextField\n              onChange={onChange}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              size=\"small\"\n            />\n            <Button type=\"submit\" variant=\"contained\">\n              Add contact\n            </Button>\n          </Stack>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@mui/material/TextField';\n\nimport { setFilterValue } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/contacts/contacts-selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = event => {\n    dispatch(setFilterValue(event.currentTarget.value));\n  };\n\n  return (\n    <TextField\n      fullWidth\n      label=\"Find contacts by name\"\n      type=\"text\"\n      value={filter}\n      name=\"filter\"\n      onChange={changeFilter}\n      size=\"small\"\n    />\n  );\n}\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nfunction Contact({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  const removeContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ListItem key={id}>\n      <ListItemAvatar>\n        <Avatar>\n          <AccountCircleIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary={name} secondary={number} />\n\n      <IconButton edge=\"end\" aria-label=\"delete\" onClick={removeContact}>\n        <DeleteIcon />\n      </IconButton>\n    </ListItem>\n  );\n}\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","import List from '@mui/material/List';\nimport { useSelector } from 'react-redux';\n\nimport Contact from './Contact';\nimport { selectFilteredContacts } from 'redux/contacts/contacts-selectors';\n\nexport default function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <Contact key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contacts-selectors';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\n\nfunction ContactsBook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Stack spacing={3} sx={{ pt: 4 }}>\n        <Typography component=\"h1\" variant=\"h3\">\n          Phonebook\n        </Typography>\n        <ContactForm />\n        {isLoading && !error && (\n          <CircularProgress\n            sx={{ position: 'fixed', top: '50%', left: '50%' }}\n          />\n        )}\n        <Typography component=\"h2\" variant=\"h4\">\n          Contacts\n        </Typography>\n        <Filter />\n        <ContactList />\n      </Stack>\n    </Container>\n  );\n}\n\nexport default ContactsBook;\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","toLowerCase","trim","contact","name","includes","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","onChange","event","target","value","Card","CardContent","onSubmit","preventDefault","some","alert","addContact","Stack","spacing","TextField","type","pattern","title","required","size","Button","variant","fullWidth","label","setFilterValue","currentTarget","id","ListItem","ListItemAvatar","Avatar","AccountCircle","ListItemText","primary","secondary","IconButton","edge","onClick","deleteContact","Delete","ContactList","filteredContacts","List","sx","width","maxWidth","bgcolor","map","useEffect","fetchContacts","Container","pt","Typography","component","CircularProgress","position","top","left"],"sourceRoot":""}